# =============================================================================
# ==================== GENERATED SECTION ======================================
# =============================================================================
#CSRC											:=
#CXXSRC											:=
#TESTSRC											:=

# =============================================================================
# =============== PROJECT CONFIGURATION SECTION ===============================
# =============================================================================

# full generated binary name (with extension, relative to Makefile dir)
NAME		:= libft.a

# valid output types are : executable static shared wasm
TYPE		:= static

# will pass debug flags
DEBUG		:= 0

# where tests dirs are
TESTDIR		:= misc/tests

# =============================================================================
# ========================= UTILS =============================================
# =============================================================================

define str_replace
		$(subst $(2),$(3),$(1))
endef
define replace_ext
        $(patsubst %.$(1),%.$(2),$(3))
endef

# =============================================================================
# ==================== DEFAULT OPTIONS ========================================
# =============================================================================

# string variables
SRCDIR		?= src
BINDIR      ?= bin
TESTDIR     ?= test
NAME        ?= a.out
TEST        ?= test
TYPE        ?= executable
DEBUG       ?= 1
CXXENABLED  ?= 0
# default toolchain
RM          ?= /bin/rm -f
AR			?= ar
ARFLAGS		?= -rcs
CC          ?= gcc
CXX         ?= g++
# default flags
CFLAGS      ?= -MMD -Werror -Wextra -Wall
CXXFLAGS    ?= -std=c++11 $(CFLAGS)
TESTFLAGS   ?= $(CXXFLAGS)
# array variables
INCDIR      ?= inc/
LIBPATH     ?=# ./../../lib
LIBNAME     ?=# foobar
CSRC        ?=# $(call find_by_ext,$(SRCDIR),c)
COBJ        ?= $(call replace_ext,c,o,$(call str_replace,$(CSRC),$(SRCDIR),$(BINDIR)))
CDF         ?= $(call replace_ext,o,d,$(COBJ))
CXXSRC      ?=# $(call find_by_ext,$(SRCDIR),cpp)
CXXDF       ?= $(call replace_ext,o,d,$(COBJ))
CXXOBJ      ?= $(call replace_ext,cpp,o,$(call str_replace,$(CXXSRC),$(SRCDIR),$(BINDIR)))
TESTSRC     ?=# $(call find_by_ext,$(TESTDIR),cpp)
TESTOBJ     ?= $(call replace_ext,cpp,o,$(call str_replace,$(TESTSRC),$(TESTDIR),$(BINDIR)/$(TESTDIR)))
TESTDF      ?= $(call replace_ext,o,d,$(TESTOBJ))
LIBDIR      ?= $(addprefix -L,$(LIBDIR))
LIBNAME     ?= $(addprefix -l $(LIBNAME))
INCDIR      ?= $(addprefix -I $(INCDIR))
CXXFLAGS    ?= $(CXXFLAGS) $(INCDIR) $(LIBDIR) $(LIBNAME)
CFLAGS      ?= $(CFLAGS) $(INCDIR) $(LIBDIR) $(LIBNAME)
TESTFLAGS   ?= $(TESTFLAGS) $(INCDIR) $(LIBDIR) $(LIBNAME)
DEBUGFLAGS	?= -g -fsanitize=address -fno-omit-frame-pointer
MKFILE_PATH ?= $(abspath $(lastword $(MAKEFILE_LIST)))
CURRENT_DIR ?= $(patsubst %/,%,$(dir $(MKFILE_PATH)))
DEBUG		?= 0
ifeq ($(DEBUG),1)
CXXFLAGS    += $(DEBUGFLAGS)
CFLAGS		+= $(DEBUGFLAGS)
endif

# =============================================================================
# ======================= DEFAULT RULES =======================================
# =============================================================================

# make rules
all:                        $(NAME)


watch-compile:
		source $(current_dir)/watcher.sh "make" "$(SRCDIR)" "$(TESTDIR)"

watch-test:
		source $(current_dir)/watcher.sh "make test" "$(SRCDIR)" "$(TESTDIR)"

test:                                           $(COBJ) $(CXXOBJ) $(TESTOBJ)
		$(CXX) -o $(BINDIR)/$(TESTDIR)/$(TEST) $(COBJ) $(CXXOBJ) $(TESTOBJ) $(CXXOBJ)
		./$(BINDIR)/$(TESTDIR)/$(TEST)

clean:
		$(RM) $(COBJ) $(CXXOBJ) $(TESTOBJ) $(CDF) $(CXXDF) $(TESTDF)

fclean:
		$(RM) $(NAME) $(BINDIR)/$(TESTDIR)/$(TEST)

re:
		fclean all test

norme:
		norminette

release:
		./.misc/release.sh

$(BINDIR)/%.o:				$(SRCDIR)/%.c
		$(CC) $(CFLAGS)			-c		$< -o					$@

$(BINDIR)/%.o:				$(SRCDIR)/%.cpp
ifeq ($(CXXENABLED),1)
        $(CXX) $(CXXFLAGS)		-c		$< -o					$@
endif

$(BINDIR)/$(TESTDIR)/%.o:	$(TESTDIR)/%.cpp
		$(CXX) $(CXXFLAGS)		-c		$< -o					$@

$(NAME):                                        $(COBJ) $(CXXOBJ)
ifeq ($(TYPE),static)
ifeq ($(CXXENABLED),0)
		$(AR) $(ARFLAGS) $(NAME) $(COBJ)
endif
ifeq ($(CXXENABLED),1)
		$(AR) $(ARFLAGS) $(NAME) $(COBJ) $(CXXOBJ)
endif
endif
ifeq ($(TYPE),shared)
ifeq ($(CXXENABLED),0)
		$(CC) $(CFLAGS) -shared $(COBJ) -o $(NAME)
endif
ifeq ($(CXXENABLED),1)
		$(CXX) $(CXXFLAGS) -shared $(COBJ) $(CXXOBJ) -o $(NAME)
endif
endif
ifeq ($(TYPE),executable)
ifeq ($(CXXENABLED),0)
		$(CC) $(CFLAGS) $(COBJ) -o $(NAME)
endif
ifeq ($(CXXENABLED),1)
		$(CXX) $(CXXFLAGS) $(COBJ) $(CXXOBJ) -o $(NAME)
endif
endif

.PHONY:
		all fclean clean re test

